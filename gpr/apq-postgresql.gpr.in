---- author Daniel Norte de Moraes <danielcheagle@gmail.com>
---- tested in Debian Sid, Gcc 4.6 , gnat 4.6 , gprbuild 2011-1 :-)
----
---- this project file permit "simultaneously" :
---- choose compile with (static or shared) and ( normal or debug) and (system operations)  libs.
--
-- this permit cross-compiling too :-)
---- 

----    IMPORTANT!!!  You Can hit and compile you program just passing for your
--			program project file these three(3) environment variables:
--			 "Static_Or_Dynamic" , "Os" and "Debug_information". this is made
--			 by the "-Xvariable=value" (without double quotes)
--			eg: if your program import apq-postgresql.gpr in your my_program.gpr made 
--
--			gnatmake -Pmy_program.gpr -Xstatic_or_dynamic=dynamic -XOs=mswindows -Xdebug_information=yes
--
--			to compile your program with lib shared+debug+mswindows. if the combination 
--			don't exist, usually the compiler/linker will hit
--			a error message. these combination was determined by the time the libs was compiled and installed.
--			of course you can use "gprbuil" instead og gnatmake :-)
--		    the gpr file will take  care for you where are the libs.
----                   You will need however, in system specific manner,  a way for
----                    your program using the libs "as being run/executing" locate the libs for him :-)
----                   We just (just? ;-) take care of _compilation_ :-)
----       p.s.: You can use gnat-gps. gnat-gps will permit you choose in a Gui , the enviroment variables on-the-fly :-)
----  Enjoy!!! :-)

with "apq.gpr"; -- You can need set ADA_PROJECT_PATH

project Apq.postgresql is
   -----------------------
   -- type declarations --
   -----------------------
	prefix := $prefix ;

   type Static_Or_Dynamic_Type is ("dynamic", "static", "relocatable" );
   type Debug_information_Type is ("yes", "no");
   type Os_Type is ("other", "mswindows", "linux" , "darwin" , "bsd" );
   --
   Static_Or_Dynamic : Static_Or_Dynamic_Type := external ("static_or_dynamic", "static");
   Os : Os_Type := external ("os", "linux");
   Debug_information : Debug_information_Type := external ("debug_information", "no");
   --
   Debug  := "";
   Debug_option_list_builder := ();  -- null string_list
   Debug_option_list_compiler := (); -- null string_list

   case debug_information is
      when "yes" =>
         Debug := Debug & "debug";
         case os is
            when "other" => -- :0}
               Debug_option_list_builder := Debug_option_list_builder & ( "-g" );
               Debug_option_list_compiler := Debug_option_list_compiler & ("-fstack-check", "-gnata" , "-gnato" , "-gnatE" ); -- fixme , if necessary :-)

            when "mswindows" =>
               Debug_option_list_builder := Debug_option_list_builder & ( "-g" );
               Debug_option_list_compiler := Debug_option_list_compiler & ("-fstack-check", "-gnata" , "-gnato" , "-gnatE" ); -- fixme , if necessary :-)

            when "linux" =>
               Debug_option_list_builder := Debug_option_list_builder & ( "-g" );
               Debug_option_list_compiler := Debug_option_list_compiler & ("-fstack-check", "-gnata" , "-gnato" , "-gnatE" ); -- fixme , if necessary :-)

            when "darwin" =>
               Debug_option_list_builder := Debug_option_list_builder & ( "-g" );
               Debug_option_list_compiler := Debug_option_list_compiler & ("-fstack-check", "-gnata" , "-gnato" , "-gnatE" ); -- fixme , if necessary :-)

            when "bsd" =>
               Debug_option_list_builder := Debug_option_list_builder & ( "-g" );
               Debug_option_list_compiler := Debug_option_list_compiler & ("-fstack-check", "-gnata" , "-gnato" , "-gnatE" ); -- fixme , if necessary :-)

            when others => ---- :0]
               Debug_option_list_builder := Debug_option_list_builder & ( "-g" );
               Debug_option_list_compiler := Debug_option_list_compiler & ("-fstack-check", "-gnata" , "-gnato" , "-gnatE" ); -- fixme , if necessary :-)

         end case;  -- end yes/os
      when "no" =>
         Debug := Debug & "";
         case os is
            when "other" => -- :0}
               Debug_option_list_builder := Debug_option_list_builder & (  );
               Debug_option_list_compiler := Debug_option_list_compiler & (  ); -- fixme , if necessary :-) --> insert some thing making sense in string_list form -> ()

            when "mswindows" =>
               Debug_option_list_builder := Debug_option_list_builder & (  );
               Debug_option_list_compiler := Debug_option_list_compiler & (  ); -- fixme , if necessary :-) --> insert some thing making sense in string_list form -> ()

            when "linux" =>
               Debug_option_list_builder := Debug_option_list_builder & (  );
               Debug_option_list_compiler := Debug_option_list_compiler & (  ); -- fixme , if necessary :-) --> insert some thing making sense in string_list form -> ()

            when "darwin" =>
               Debug_option_list_builder := Debug_option_list_builder & (  );
               Debug_option_list_compiler := Debug_option_list_compiler & ( ); -- fixme , if necessary :-) --> insert some thing making sense in string_list form -> ()

            when "bsd" =>
               Debug_option_list_builder := Debug_option_list_builder & ( );
               Debug_option_list_compiler := Debug_option_list_compiler & ( ); -- fixme , if necessary :-) --> insert some thing making sense in string_list form -> ()

            when others => -- :0]
               Debug_option_list_builder := Debug_option_list_builder & (   );
               Debug_option_list_compiler := Debug_option_list_compiler & (   ); -- fixme , if necessary :-) --> insert some thing making sense in string_list form -> ()

         end case; -- end no/os
      when others =>
		  null;
   end case; -- end Debug_information

   for Languages use ("Ada");
   for Source_Dirs use () & ( prefix & "/include/apq-postgresql" ) ;
   for Library_Name use "apq-postgresql" ;
   case debug_information is
	   when "yes" =>
		   case static_or_dynamic is
				when "dynamic" | "relocatable" =>
					for Library_Dir use "" & prefix & "/lib/" & Os & "/shared/debug/"  ;
					for Library_ALI_Dir use  "" & prefix & "/lib/" & Os & "/shared/debug/ali/" ;
				when "static" =>
					for Library_Dir use "" & prefix & "/lib/" & Os & "/static/debug/"  ;
					for Library_ALI_Dir use  "" & prefix & "/lib/" & Os & "/static/debug/ali/" ;
		   end case;
	   when "no"  =>
		   case static_or_dynamic is
				when "dynamic" | "relocatable" =>
					for Library_Dir use "" & prefix & "/lib/" & Os & "/shared/"  ;
					for Library_ALI_Dir use  "" & prefix & "/lib/" & Os & "/shared/ali/" ;
				when "static" =>
					for Library_Dir use "" & prefix & "/lib/" & Os & "/static/"  ;
					for Library_ALI_Dir use  "" & prefix & "/lib/" & Os & "/static/ali/" ;
		   end case;
   end case;

   for Library_Kind use Static_Or_Dynamic;
   for Externally_Built use "true";

   package Compiler is
      for Default_Switches ("ada") use ("-O2", "-gnat05", "-gnatn"  ) & Debug_option_list_compiler ;
   end Compiler;

   package Builder  is
      for Default_Switches ("ada") use ("-O2", "-gnat05", "-gnatn"  ) & Debug_option_list_builder ;
   end Builder;

end Apq.postgresql;

