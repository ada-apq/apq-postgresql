
   

   -----------------------
   -- type declarations --
   -----------------------

   type Static_Or_Dynamic_Type is ("dynamic", "static", "relocatable" );
   type Debug_information_Type is ("yes", "no");
   type Os_Type is ("other", "mswindows", "linux" , "darwin" , "bsd" );
   --
   Static_Or_Dynamic : Static_Or_Dynamic_Type := external ("static_or_dynamic", "static");
   Os : Os_Type := external ("os", "linux");
   Debug_information : Debug_information_Type := external ("debug_information", "no");
   --
   Debug  := "";
  
   case debug_information is
      when "yes" =>
         Debug := "debug";
      when "no" =>
         Debug := "normal";
   end case; -- end Debug_information

   sufix1 := "";
   sufix2 := "";
   export_dynamic := "--export-dynamic";
   case static_or_dynamic is
      when "dynamic" | "relocatable" =>
         case os is
            when "other" =>
               sufix1 := "so.";
               sufix2 := "";
               export_dynamic := "--export-dynamic";
            when "mswindows" =>
               sufix1 := "so.";
               sufix2 := ".dll";
               export_dynamic := "--export-dynamic";
            when "linux" =>
               sufix1 := "so.";
               sufix2 := "";
               export_dynamic := "--export-dynamic";
            when "darwin" => -- fix it ;-)
               sufix1 := "so.";
               sufix2 := ".lib";
               export_dynamic := "--export-dynamic";
            when "bsd" =>  -- just a stub here :-)
               sufix1 := "so.";
               sufix2 := ".idx";
               export_dynamic := "--export-dynamic";
            when others =>
               sufix1 := "so.";
               sufix2 := "";
               export_dynamic := "";  -- fix it ;-)
         end case;
      when "static" =>
         case os is
            when "other" =>
               sufix1 := "static.";
               sufix2 := "";
               export_dynamic := "";
            when "mswindows" =>
               sufix1 := "static.";
               sufix2 := "";
               export_dynamic := "";
            when "linux" =>
               sufix1 := "static.";
               sufix2 := "";
               export_dynamic := "";
            when "darwin" =>
               sufix1 := "static.";
               sufix2 := "";
               export_dynamic := "";
            when "bsd" =>
               sufix1 := "static.";
               sufix2 := "";
               export_dynamic := "";
            when others =>
               sufix1 := "static.";
               sufix2 := "";
               export_dynamic := "";
         end case;
      when others =>
		  null;
   end case;

   for Languages use ("Ada");
   for Source_Dirs use ( ) & mydummysource  ;
   for Object_Dir use "" & basedir & "/" & Os & "/" & Static_Or_Dynamic & "/" & debug & "/obj_dummy/";
   for Library_Name use "apq_dummy" ;
   for Library_Dir use "" & basedir & "/" & Os & "/" & Static_Or_Dynamic & "/" & debug & "/lib_dummy/" ;
   for Library_ALI_Dir use  "" & basedir & "/" & Os & "/" & Static_Or_Dynamic & "/" & debug & "/ali_dummy/" ;
   for Library_Kind use Static_Or_Dynamic;
   for Library_Version use "libapq_dummy." & sufix1 & version & sufix2 ;
   for Externally_Built use "false";

   package Compiler is
      for Default_Switches ("Ada") use  ("-O2", "-gnat05", "-fPIC" ) ;
   end Compiler;


end apq_postgresql_version;

