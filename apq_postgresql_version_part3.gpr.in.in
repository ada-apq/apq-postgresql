
   dummy_source := "" & $mysource & "../src_dummy/";
   ---------------------------------------------------
   --
   Debug  := "";
   Debug_option_list_builder := ();  -- null string_list
   Debug_option_list_compiler := (); -- null string_list

   case debug_information is
      when "yes" =>
         Debug := Debug & "debug";
         case os is
            when "other" => -- :0}
               Debug_option_list_builder := Debug_option_list_builder & ( "-g" );
               Debug_option_list_compiler := Debug_option_list_compiler & ("-fstack-check", "-gnata" , "-gnato" , "-gnatE" ); -- fixme , if necessary :-)

            when "mswindows" =>
               Debug_option_list_builder := Debug_option_list_builder & ( "-g" );
               Debug_option_list_compiler := Debug_option_list_compiler & ("-fstack-check", "-gnata" , "-gnato" , "-gnatE" ); -- fixme , if necessary :-)

            when "linux" =>
               Debug_option_list_builder := Debug_option_list_builder & ( "-g" );
               Debug_option_list_compiler := Debug_option_list_compiler & ("-fstack-check", "-gnata" , "-gnato" , "-gnatE" ); -- fixme , if necessary :-)

            when "darwin" =>
               Debug_option_list_builder := Debug_option_list_builder & ( "-g" );
               Debug_option_list_compiler := Debug_option_list_compiler & ("-fstack-check", "-gnata" , "-gnato" , "-gnatE" ); -- fixme , if necessary :-)

            when "bsd" =>
               Debug_option_list_builder := Debug_option_list_builder & ( "-g" );
               Debug_option_list_compiler := Debug_option_list_compiler & ("-fstack-check", "-gnata" , "-gnato" , "-gnatE" ); -- fixme , if necessary :-)

            when others => ---- :0]
               Debug_option_list_builder := Debug_option_list_builder & ( "-g" );
               Debug_option_list_compiler := Debug_option_list_compiler & ("-fstack-check", "-gnata" , "-gnato" , "-gnatE" ); -- fixme , if necessary :-)

         end case;  -- end yes/os
      when "no" =>
         Debug := Debug & "normal";
         case os is
            when "other" => -- :0}
               Debug_option_list_builder := Debug_option_list_builder & (  );
               Debug_option_list_compiler := Debug_option_list_compiler & (  ); -- fixme , if necessary :-) --> insert some thing making sense in string_list form -> ()

            when "mswindows" =>
               Debug_option_list_builder := Debug_option_list_builder & (  );
               Debug_option_list_compiler := Debug_option_list_compiler & (  ); -- fixme , if necessary :-) --> insert some thing making sense in string_list form -> ()

            when "linux" =>
               Debug_option_list_builder := Debug_option_list_builder & (  );
               Debug_option_list_compiler := Debug_option_list_compiler & (  ); -- fixme , if necessary :-) --> insert some thing making sense in string_list form -> ()

            when "darwin" =>
               Debug_option_list_builder := Debug_option_list_builder & (  );
               Debug_option_list_compiler := Debug_option_list_compiler & ( ); -- fixme , if necessary :-) --> insert some thing making sense in string_list form -> ()

            when "bsd" =>
               Debug_option_list_builder := Debug_option_list_builder & ( );
               Debug_option_list_compiler := Debug_option_list_compiler & ( ); -- fixme , if necessary :-) --> insert some thing making sense in string_list form -> ()

            when others => -- :0]
               Debug_option_list_builder := Debug_option_list_builder & (   );
               Debug_option_list_compiler := Debug_option_list_compiler & (   ); -- fixme , if necessary :-) --> insert some thing making sense in string_list form -> ()

         end case; -- end no/os
      when others =>
		  null;
   end case; -- end Debug_information

   sufix1 := "";
   sufix2 := "";
   export_dynamic := "--export-dynamic";
   case static_or_dynamic is
      when "dynamic" | "relocatable" =>
         case os is
            when "other" =>
               sufix1 := "so.";
               sufix2 := "";
               export_dynamic := "--export-dynamic";
            when "mswindows" =>
               sufix1 := "so.";
               sufix2 := ".dll";
               export_dynamic := "--export-dynamic";
            when "linux" =>
               sufix1 := "so.";
               sufix2 := "";
               export_dynamic := "--export-dynamic";
            when "darwin" => -- fix it ;-)
               sufix1 := "so.";
               sufix2 := ".lib";
               export_dynamic := "--export-dynamic";
            when "bsd" =>  -- just a stub here :-)
               sufix1 := "so.";
               sufix2 := ".idx";
               export_dynamic := "--export-dynamic";
            when others =>
               sufix1 := "so.";
               sufix2 := "";
               export_dynamic := "";  -- fix it ;-)
         end case;
      when "static" =>
         case os is
            when "other" =>
               sufix1 := "static.";
               sufix2 := "";
               export_dynamic := "";
            when "mswindows" =>
               sufix1 := "static.";
               sufix2 := "";
               export_dynamic := "";
            when "linux" =>
               sufix1 := "static.";
               sufix2 := "";
               export_dynamic := "";
            when "darwin" =>
               sufix1 := "static.";
               sufix2 := "";
               export_dynamic := "";
            when "bsd" =>
               sufix1 := "static.";
               sufix2 := "";
               export_dynamic := "";
            when others =>
               sufix1 := "static.";
               sufix2 := "";
               export_dynamic := "";
         end case;
      when others =>
		  null;
   end case;

   package Compiler is
      for Default_Switches ("ada") use ("-O2", "-gnat05", "-gnatn" , "-fPIC" ) & Debug_option_list_compiler ;
   end Compiler;

   package Builder  is
      for Default_Switches ("ada") use ("-O2", "-gnat05", "-gnatn" , "-fPIC" ) & Debug_option_list_builder ;
   end Builder;
-------------------------------------------------------------

   for Languages use ("Ada");
   for Source_Dirs use () &  dummy_source ;
   for Object_Dir use "" & basedir & "/" & Os & "/" & Static_Or_Dynamic & "/" & debug & "/obj_dummy/";
   for Library_Name use "apq_dummy" ;
   for Library_Dir use "" & basedir & "/" & Os & "/" & Static_Or_Dynamic & "/" & debug & "/lib_dummy/" ;
   for Library_ALI_Dir use  "" & basedir & "/" & Os & "/" & Static_Or_Dynamic & "/" & debug & "/ali_dummy/" ;
   for Library_Kind use Static_Or_Dynamic;
   for Library_Version use "libapq_dummy." & sufix1 & version & sufix2 ;
   for Library_Options use ("-Wl," & export_dynamic  );
   for Externally_Built use "false";

   package Compiler is
      for Default_Switches ("ada") use ("-O2", "-gnat05", "-gnatn" , "-fPIC" ) ;
   end Compiler;

   package Builder  is
      for Default_Switches ("ada") use ("-O2", "-gnat05", "-gnatn" , "-fPIC" )  ;
   end Builder;

end apq_postgresql_version;

