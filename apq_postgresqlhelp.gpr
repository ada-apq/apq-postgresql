---- author Daniel Norte de Moraes <danielcheagle@gmail.com>
---- tested in Debian Sid, Gcc 4.6 , gnat 4.4.6 , gprbuild 1.3.0-2 :-)
---- this Building System permit "simultaneously" (if you want) :
---- Make static and shared libs
---- Cross-Compiling too ;-) enjoy! :-)

with "./apq_postgresql_version.gpr" ;
project apq_postgresqlhelp is
   type Static_Or_Dynamic_Type is ("dynamic", "static", "relocatable");
   type Debug_information_Type is ("yes", "no");
   type Os_Type is ("other", "mswindows", "linux" , "darwin" , "bsd" );
   --
   Static_Or_Dynamic : Static_Or_Dynamic_Type := external ("static_or_dynamic", "static");
   Os : Os_Type := external ("os", "linux");
   Debug_information : Debug_information_Type := external ("debug_information", "no");
   --

   Debug  := "";
   Debug_option_list_builder := ();
   Debug_option_list_compiler := ();

   case Debug_information is
      when "yes" =>
         Debug := Debug & "debug";
         case os is
            when "other" => -- :0}
               Debug_option_list_builder := Debug_option_list_builder & ( "-g" );
               Debug_option_list_compiler := Debug_option_list_compiler & ("-fstack-check" ); -- fixme , if necessary :-)

            when "mswindows" =>
               Debug_option_list_builder := Debug_option_list_builder & ( "-g" );
               Debug_option_list_compiler := Debug_option_list_compiler & ("-fstack-check" ); -- fixme , if necessary :-)

            when "linux" =>
               Debug_option_list_builder := Debug_option_list_builder & ( "-g" );
               Debug_option_list_compiler := Debug_option_list_compiler & ("-fstack-check" ); -- fixme , if necessary :-)

            when "darwin" =>
               Debug_option_list_builder := Debug_option_list_builder & ( "-g" );
               Debug_option_list_compiler := Debug_option_list_compiler & ("-fstack-check" ); -- fixme , if necessary :-)

            when "bsd" =>
               Debug_option_list_builder := Debug_option_list_builder & ( "-g" );
               Debug_option_list_compiler := Debug_option_list_compiler & ("-fstack-check" ); -- fixme , if necessary :-)

            when others => ---- :0]
               Debug_option_list_builder := Debug_option_list_builder & ( "-g" );
               Debug_option_list_compiler := Debug_option_list_compiler & ("-fstack-check" ); -- fixme , if necessary :-)

         end case;  -- end yes/os
      when "no" =>
         Debug := Debug & "normal";
         case os is
            when "other" => -- :0}
               Debug_option_list_builder := Debug_option_list_builder & (  );
               Debug_option_list_compiler := Debug_option_list_compiler & (  ); -- fixme , if necessary :-) --> insert some thing making sense in string_list form -> ()

            when "mswindows" =>
               Debug_option_list_builder := Debug_option_list_builder & (  );
               Debug_option_list_compiler := Debug_option_list_compiler & (  ); -- fixme , if necessary :-) --> insert some thing making sense in string_list form -> ()

            when "linux" =>
               Debug_option_list_builder := Debug_option_list_builder & (  );
               Debug_option_list_compiler := Debug_option_list_compiler & (  ); -- fixme , if necessary :-) --> insert some thing making sense in string_list form -> ()

            when "darwin" =>
               Debug_option_list_builder := Debug_option_list_builder & (  );
               Debug_option_list_compiler := Debug_option_list_compiler & ( ); -- fixme , if necessary :-) --> insert some thing making sense in string_list form -> ()

            when "bsd" =>
               Debug_option_list_builder := Debug_option_list_builder & ( );
               Debug_option_list_compiler := Debug_option_list_compiler & ( ); -- fixme , if necessary :-) --> insert some thing making sense in string_list form -> ()

            when others => -- :0]
               Debug_option_list_builder := Debug_option_list_builder & (   );
               Debug_option_list_compiler := Debug_option_list_compiler & (   ); -- fixme , if necessary :-) --> insert some thing making sense in string_list form -> ()

         end case; -- end no/os
      when others =>
		  null;
   end case; -- end Debug_information


   sufix1 := "";
   sufix2 := "";
   export_dynamic := "--export-dynamic";
   case static_or_dynamic is
      when "dynamic" | "relocatable" =>
         case os is
            when "linux" =>
               sufix1 := "so.";
               sufix2 := "";
               export_dynamic := "--export-dynamic";
            when "mswindows" =>
               sufix1 := "";
               sufix2 := ".dll";
               export_dynamic := "--export-dynamic";
            when "other" =>  -- just a stub here :-)
               sufix1 := "";
               sufix2 := "";
               export_dynamic := "--export-dynamic";
            when others =>
                sufix1 := "";
               sufix2 := "";
               export_dynamic := "";  -- fix it ;-)
         end case;
      when "static" =>
         case os is
            when "linux" =>
               sufix1 := "";
               sufix2 := "";
               export_dynamic := "";
            when "mswindows" =>
               sufix1 := "";
               sufix2 := "";
               export_dynamic := "";
            when "other" =>
               sufix1 := "";
               sufix2 := "";
               export_dynamic := "";
            when others =>
               sufix1 := "";
               sufix2 := "";
               export_dynamic := "";
         end case;
   end case;


   for Languages use ("C");
   for Source_Dirs use ( ) & apq_postgresql_version.myhelpsource ;
   for Object_Dir use "" & apq_postgresql_version.basedir & "/" & Os & "/" & Static_Or_Dynamic & "/" & debug & "/obj_c/";
   for Library_Name use "apq_postgresqlhelp" ;
   for Library_Dir use "" & apq_postgresql_version.basedir & "/" & Os & "/" & Static_Or_Dynamic & "/" & debug & "/lib_c/" ;
   -- no Ada sources :-) for Library_ALI_Dir use  "" & apq_postgresql_version.basedir & "/" & Os & "/" & Static_Or_Dynamic & "/" & debug & "/ali_c/" ;
   for Library_Kind use Static_Or_Dynamic;
   for Library_Version use "libapq_postgresqlhelp." & sufix1 & apq_postgresql_version.version & sufix2 ;
   for Library_Options use ("-Wl," & export_dynamic ) & apq_postgresql_version.system_libs  & ( "-lssl" , "-lpq");
   for Externally_Built use "false";

   package Compiler is
      for Default_Switches ("C") use ("-O2" ) & Debug_option_list_compiler ;
   end Compiler;

   package Builder  is
      for Default_Switches ("C") use ("-O2"  ) & Debug_option_list_builder ;
   end Builder;





end apq_postgresqlhelp;
