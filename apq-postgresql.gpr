---- author Daniel Norte de Moraes <danielcheagle@gmail.com>
---- tested in Debian Sid, Gcc 4.6 , gnat 4.4.6 , gprbuild 1.3.0-2 :-)
----
---- this Building System permit "simultaneously" (if you want) :
---- Make static and shared libs
---- Cross-Compiling too ;-) enjoy! :-)
---- obs.: the  MakeFile permit you choose the correct libs for _each_ library you type make ! :-)
---- obs.: "make --SYSTEM_LIBS=<path_value>" can be used for it. (e.g cross-compiling
----       or just change the base lib , in per compiling base. For The Braves and Sagacious ^_^!!!

---- 	IMPORTANT!!!  You NEED INSTALL the gpr/apq-postgresql.gpr
----                   and apq_postgresql_version in ONE(1) local Only if you want access all
----                   compileds libs. the build system take care for you where are all them ;-)
----                   just hit " make --PREFIX_GLOBAL_GPR=<path_value> install " ;
----                  obs.: you 'can' alter --prefix_global_gpr if wou want :-)
----                  obs.: BUT ONLY the 'last' install contains 'last' 'tracking' these libs files ;-)

----    IMPORTANT!!!  You Can hit make and make install  any time you want. the build system e the global_gpr take
----                   care for you where are the libs.
----                   You will need however, in system specific manner, that
----                    your program using the libs "as being run/executing" locate the libs for him :-)
----                   We just (just? ;-) take care of _compilation_ :-)
----
----

with "apq.gpr";
with "./apq_postgresql_version.gpr";
with "./apq_postgresqlhelp.gpr";

project Apq.postgresql is
   -----------------------
   -- type declarations --
   -----------------------

   type Static_Or_Dynamic_Type is ("dynamic", "static", "relocatable" );
   type Debug_information_Type is ("yes", "no");
   type Os_Type is ("other", "mswindows", "linux" , "darwin" , "bsd" );
   --
   Static_Or_Dynamic : Static_Or_Dynamic_Type := external ("static_or_dynamic", "static");
   Os : Os_Type := external ("os", "linux");
   Debug_information : Debug_information_Type := external ("debug_information", "no");
   --
   Debug  := "";
   Debug_option_list_builder := ();  -- null string_list
   Debug_option_list_compiler := (); -- null string_list

   case Debug_information is
      when "yes" =>
         Debug := Debug & "debug";
         case os is
            when "other" => -- :0}
               Debug_option_list_builder := Debug_option_list_builder & ( "-g" );
               Debug_option_list_compiler := Debug_option_list_compiler & ("-fstack-check", "-gnata" , "-gnato" , "-gnatE" ); -- fixme , if necessary :-)

            when "mswindows" =>
               Debug_option_list_builder := Debug_option_list_builder & ( "-g" );
               Debug_option_list_compiler := Debug_option_list_compiler & ("-fstack-check", "-gnata" , "-gnato" , "-gnatE" ); -- fixme , if necessary :-)

            when "linux" =>
               Debug_option_list_builder := Debug_option_list_builder & ( "-g" );
               Debug_option_list_compiler := Debug_option_list_compiler & ("-fstack-check", "-gnata" , "-gnato" , "-gnatE" ); -- fixme , if necessary :-)

            when "darwin" =>
               Debug_option_list_builder := Debug_option_list_builder & ( "-g" );
               Debug_option_list_compiler := Debug_option_list_compiler & ("-fstack-check", "-gnata" , "-gnato" , "-gnatE" ); -- fixme , if necessary :-)

            when "bsd" =>
               Debug_option_list_builder := Debug_option_list_builder & ( "-g" );
               Debug_option_list_compiler := Debug_option_list_compiler & ("-fstack-check", "-gnata" , "-gnato" , "-gnatE" ); -- fixme , if necessary :-)

            when other => -- :0]
               Debug_option_list_builder := Debug_option_list_builder & ( "-g" );
               Debug_option_list_compiler := Debug_option_list_compiler & ("-fstack-check", "-gnata" , "-gnato" , "-gnatE" ); -- fixme , if necessary :-)

         end case;  -- end yes/os
      when "no" =>
         Debug := Debug & "normal";
         case os is
            when "other" => -- :0}
               Debug_option_list_builder := Debug_option_list_builder & (  );
               Debug_option_list_compiler := Debug_option_list_compiler & (  ); -- fixme , if necessary :-) --> insert some thing making sense in string_list form -> ()

            when "mswindows" =>
               Debug_option_list_builder := Debug_option_list_builder & (  );
               Debug_option_list_compiler := Debug_option_list_compiler & (  ); -- fixme , if necessary :-) --> insert some thing making sense in string_list form -> ()

            when "linux" =>
               Debug_option_list_builder := Debug_option_list_builder & (  );
               Debug_option_list_compiler := Debug_option_list_compiler & (  ); -- fixme , if necessary :-) --> insert some thing making sense in string_list form -> ()

            when "darwin" =>
               Debug_option_list_builder := Debug_option_list_builder & (  );
               Debug_option_list_compiler := Debug_option_list_compiler & ( ); -- fixme , if necessary :-) --> insert some thing making sense in string_list form -> ()

            when "bsd" =>
               Debug_option_list_builder := Debug_option_list_builder & ( );
               Debug_option_list_compiler := Debug_option_list_compiler & ( ); -- fixme , if necessary :-) --> insert some thing making sense in string_list form -> ()

            when other => -- :0]
               Debug_option_list_builder := Debug_option_list_builder & (   );
               Debug_option_list_compiler := Debug_option_list_compiler & (   ); -- fixme , if necessary :-) --> insert some thing making sense in string_list form -> ()

         end case; -- end no/os
      when others =>
   end case; -- end Debug_information

   sufix1 := "";
   sufix2 := "";
   export-dynamic := "--export-dynamic";
   case static_or_dynamic is
      when "dynamic" | "relocatable" =>
         case os is
            when "other" =>
               sufix1 := "so.";
               sufix2 := "";
               export-dynamic := "--export-dynamic";
            when "mswindows" =>
               sufix1 := "so.";
               sufix2 := ".dll";
               export-dynamic := "--export-dynamic";
            when "linux" =>
               sufix1 := "so.";
               sufix2 := "";
               export-dynamic := "--export-dynamic";
            when "darwin" => -- fix it ;-)
               sufix1 := "so.";
               sufix2 := ".lib";
               export-dynamic := "--export-dynamic";
            when "bsd" =>  -- just a stub here :-)
               sufix1 := "so.";
               sufix2 := ".idx";
               export-dynamic := "--export-dynamic";
            when others =>
               sufix1 := "so.";
               sufix2 := "";
               export-dynamic := "";  -- fix it ;-)
         end case;
      when "static" =>
         case os is
            when "other" =>
               sufix1 := "static.";
               sufix2 := "";
               export-dynamic := "";
            when "mswindows" =>
               sufix1 := "static.";
               sufix2 := "";
               export-dynamic := "";
            when "linux" =>
               sufix1 := "static.";
               sufix2 := "";
               export-dynamic := "";
            when "darwin" =>
               sufix1 := "static.";
               sufix2 := "";
               export-dynamic := "";
            when "bsd" =>
               sufix1 := "static.";
               sufix2 := "";
               export-dynamic := "";
            when others =>
               sufix1 := "static.";
               sufix2 := "";
               export-dynamic := "";
         end case;
      when others =>
   end case;


   for Languages use ("Ada");
   for Source_Dirs use () & apq_postgresql_version.mysource ;
   for Object_Dir use "" & apq_postgresql_version.basedir & "/" & Os & "/" & Static_Or_Dynamic & "/" & debug & "/obj/";
   for Library_Name use "apq-postgresql" ;
   for Library_Dir use "" & apq_postgresql_version.basedir & "/" & Os & "/" & Static_Or_Dynamic & "/" & debug & "/lib/ ;
   for Library_ALI_Dir use  "" & apq_postgresql_version.basedir & "/" & Os & "/" & Static_Or_Dynamic & "/" & debug & "/lib_ali/ ;
   for Library_Kind use Static_Or_Dynamic;
   for Library_Version use "libapq-postgresql." & sufix1 & apq_postgresql_version.version & sufix2 ;
   for Library_Options use ("-Wl," & export-dynamic , "-L" & apq_postgresqlhelp'Library_dir , "-lssl" , "-lpq" , "-lapq-postgresqlhelp" );
   for Externally_Built use "false";

   package Compiler is
      for Default_Switches ("ada") use ("-O2", "-gnat05", "-gnatn" , "-fPIC" ) & Debug_option_list_compiler ;
   end Compiler;

   package Builder  is
      for Default_Switches ("ada") use ("-O2", "-gnat05", "-gnatn" , "-fPIC" ) & Debug_option_list_builder ;
   end Builder;

end Apq.postgresql;

